// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  CARER
  ADMIN
  CLIENT
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  phone           String?
  password        String?
  role            UserRole         @default(USER)
  stripeAccountId Int?             @unique
  stripeAccount   StripeAccount?   @relation(fields: [stripeAccountId], references: [id])
  carerId         Int?             @unique
  carer           CarerProfile?    @relation(fields: [carerId], references: [id])
  paymentHistory  PaymentHistory[]
  address         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  File            File[]
}

model PaymentHistory {
  id             Int                  @id @default(autoincrement())
  status         String
  amount         String
  payment_method String
  creation_date  DateTime
  description    String
  userId         Int
  user           User                 @relation(fields: [userId], references: [id])
  allowedMethod  AllowedPaymentMethod @relation(fields: [payment_method], references: [payment_method])
}

model AllowedPaymentMethod {
  id             Int              @id @default(autoincrement())
  payment_method String           @unique
  PaymentHistory PaymentHistory[]
}

model StripeAccount {
  id                           Int     @id @default(autoincrement())
  stripe_customer_id           String  @unique
  default_payment_method_token String
  additional_payment_methods   Int
  user                         User?
  Client                       Client?
}

model CarerProfile {
  id                  Int                  @id @default(autoincrement())
  payment_range       String
  availability        String
  qualifications      String
  isFavorite          Boolean
  works_on_weekend    Boolean
  residency_status    String
  years_of_experience String
  speciality          String
  motivation_letter   String
  test_score          Int
  is_active           Boolean
  worked_hours        Int
  description         String
  completed_services  Int
  carerReviews        CarerReview[]
  User                User?
  ApplicationRequest  ApplicationRequest[]
}

model CarerReview {
  id      Int          @id @default(autoincrement())
  stars   Int
  comment String
  carerId Int
  carer   CarerProfile @relation(fields: [carerId], references: [id])
}

model Client {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  name               String
  phone              String
  password           String
  is_active          Boolean
  address            String?
  stripeAccountId    Int?                 @unique
  stripeAccount      StripeAccount?       @relation(fields: [stripeAccountId], references: [id])
  ApplicationRequest ApplicationRequest[]
  File               File[]
}

model ApplicationRequest {
  id            Int          @id @default(autoincrement())
  time_range    String
  address       String?
  patient_name  String
  patient_phone String
  clientId      Int?
  client        Client?      @relation(fields: [clientId], references: [id])
  description   String
  comments      String
  amount        Int
  carerId       Int
  carer         CarerProfile @relation(fields: [carerId], references: [id])
}

model ConfirmationCode {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  recipient   String   @unique
  is_verified Boolean
  expiration  DateTime @default(now())
}

model File {
  id             Int     @id @default(autoincrement())
  name           String
  key            String
  type           String
  is_profile_pic Boolean @default(false)
  userId         Int?
  user           User?   @relation(fields: [userId], references: [id])
  clientId       Int?
  client         Client? @relation(fields: [clientId], references: [id])
}
